---
- name: Deploy Promtail and Security Scan on Clients
  hosts: Test1
  become: yes
  vars:
    promtail_version: "2.9.2"
    promtail_bin_dir: /usr/local/bin
    promtail_config_path: /etc/promtail-config.yml
    loki_url: "http://172.17.9.132:31001/loki/api/v1/push"
    scan_script_path: /usr/local/bin/security_scan.sh
    client_log_path: /var/log/security_scan_collector/security_scan.log

  tasks:
    # Step 1: Download Promtail
    - name: Download Promtail binary
      get_url:
        url: "https://github.com/grafana/loki/releases/download/v{{ promtail_version }}/promtail-linux-amd64.zip"
        dest: "/tmp/promtail-linux-amd64.zip"
        mode: '0644'

    # Step 2: Unzip Promtail
    - name: Unzip Promtail
      unarchive:
        src: "/tmp/promtail-linux-amd64.zip"
        dest: "/tmp/"
        remote_src: yes

    # Step 3: Install Promtail binary
    - name: Install Promtail binary
      copy:
        src: "/tmp/promtail-linux-amd64"
        dest: "{{ promtail_bin_dir }}/promtail"
        mode: '0755'
        remote_src: yes

    # Step 4: Create Promtail config file
    - name: Create Promtail config file
      copy:
        dest: "{{ promtail_config_path }}"
        mode: '0644'
        content: |
          server:
            http_listen_port: 9080
            grpc_listen_port: 0

          positions:
            filename: /var/lib/promtail/positions.yaml

          clients:
            - url: "{{ loki_url }}"

          scrape_configs:
            - job_name: security_scan
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: security_scan
                    hostname: "{{ inventory_hostname }}"
                    __path__: "{{ client_log_path }}"

    # Step 5: Deploy security_scan.sh (updated structured script)
    - name: Deploy security_scan.sh script
      copy:
        dest: "{{ scan_script_path }}"
        mode: '0755'
        content: |
          #!/bin/bash
          LOGFILE="/var/log/security_scan_collector/security_scan.log"

          # Create log directory if missing
          mkdir -p "$(dirname "$LOGFILE")"

          # Collect system info
          HOSTNAME=$(hostname)
          IP=$(hostname -I | awk '{print $1}')
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S")
          OS_FAMILY=$(awk -F= '/^ID=/{print $2}' /etc/os-release | tr -d '"')

          # 1️⃣ Missing OS Updates
          if [[ "$OS_FAMILY" =~ (ubuntu|debian) ]]; then
            MISSING_UPDATES=$(apt list --upgradable 2>/dev/null | grep -i security | awk '{print $1}' | tr '\n' ',' | sed 's/,$//')
          elif [[ "$OS_FAMILY" =~ (rhel|centos|rocky|almalinux) ]]; then
            MISSING_UPDATES=$(yum check-update --security 2>/dev/null | awk '{print $1}' | tr '\n' ',' | sed 's/,$//')
          fi
          [[ -z "$MISSING_UPDATES" ]] && MISSING_UPDATES="None"

          # 2️⃣ Outdated Packages
          if [[ "$OS_FAMILY" =~ (ubuntu|debian) ]]; then
            OUTDATED=$(apt list --upgradable 2>/dev/null | grep -v "Listing" | awk -F/ '{print $1}' | tr '\n' ',' | sed 's/,$//')
          else
            OUTDATED=$(yum check-update 2>/dev/null | awk '{print $1}' | tr '\n' ',' | sed 's/,$//')
          fi
          [[ -z "$OUTDATED" ]] && OUTDATED="None"

          # 3️⃣ Kernel version
          KERNEL=$(uname -r)

          # 4️⃣ Vulnerable Apps
          if command -v dpkg &>/dev/null; then
            VULN_APPS=$(dpkg -l | egrep "apache2|nginx|mysql|php" | awk '{print $2}' | tr '\n' ',' | sed 's/,$//')
          elif command -v rpm &>/dev/null; then
            VULN_APPS=$(rpm -qa | egrep "httpd|nginx|mysql|php" | tr '\n' ',' | sed 's/,$//')
          fi
          [[ -z "$VULN_APPS" ]] && VULN_APPS="None"

          # 5️⃣ Weak settings
          if [[ -f /etc/security/pwquality.conf ]]; then
            WEAK=$(grep -i "minlen" /etc/security/pwquality.conf || echo "minlen not set")
          else
            WEAK="pwquality.conf not found"
          fi

          # 🧾 Final structured multi-line output (Grafana-friendly)
          {
            # Host and IP
            echo "hostname=$HOSTNAME"
            echo "ip=$IP"
            # Timestamp + summary line (single-line for Grafana-friendly parsing)
            echo "$(date +'%Y-%m-%d %H:%M:%S') hostname=$HOSTNAME ip=$IP
            # Attributes line by line
            echo "Missing_OS_Updates: $MISSING_UPDATES"
            echo "Outdated_Packages: $OUTDATED"
            echo "Weak_Settings: $WEAK"
            echo "Kernel: $KERNEL"
            echo "Vulnerable_Apps: $VULN_APPS"
            echo "---------------------------------"
            echo ""
          } >> "$LOGFILE"

    # Step 6: Execute the security scan
    - name: Execute security scan
      shell: "{{ scan_script_path }}"
      register: scan_result

    - name: Show scan output path
      debug:
        msg: "Security scan log generated at {{ client_log_path }}"

    # Step 7: Start Promtail
    - name: Start Promtail
      shell: "nohup {{ promtail_bin_dir }}/promtail -config.file={{ promtail_config_path }} > /tmp/promtail.log 2>&1 &"
      args:
        executable: /bin/bash
