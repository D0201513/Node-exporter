---
- name: Deploy Promtail and Security Scan on Clients
  hosts: 10.17.10.25
  become: yes
  vars:
    promtail_version: "2.9.2"
    promtail_bin_dir: /usr/local/bin
    promtail_config_path: /etc/promtail-config.yml
    loki_url: "http://172.17.9.132:31001/loki/api/v1/push"
    scan_script_path: /usr/local/bin/security_scan.sh
    client_log_path: /var/log/security_scan_collector/*.log

  tasks:
    # Step 1: Download Promtail binary
    - name: Download Promtail binary
      get_url:
        url: "https://github.com/grafana/loki/releases/download/v{{ promtail_version }}/promtail-linux-amd64.zip"
        dest: "/tmp/promtail-linux-amd64.zip"
        mode: '0644'

    # Step 2: Unzip Promtail
    - name: Unzip Promtail
      unarchive:
        src: "/tmp/promtail-linux-amd64.zip"
        dest: "/tmp/"
        remote_src: yes

    # Step 3: Install Promtail binary
    - name: Install Promtail binary
      copy:
        src: "/tmp/promtail-linux-amd64"
        dest: "{{ promtail_bin_dir }}/promtail"
        mode: '0755'
        remote_src: yes

    # Step 4: Create directories
    - name: Create required directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /var/lib/promtail
        - "{{ client_log_path | dirname }}"

    # Step 5: Deploy security_scan.sh
    - name: Deploy security_scan.sh script
      copy:
        dest: "{{ scan_script_path }}"
        mode: '0755'
        content: |
          #!/bin/bash
          LOGFILE="{{ client_log_path }}"
          mkdir -p "$(dirname "$LOGFILE")"

          HOSTNAME=$(hostname)
          IP=$(hostname -I | awk '{print $1}')
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
          OS_FAMILY=$(awk -F= '/^ID=/{print $2}' /etc/os-release | tr -d '"')

          # 1️⃣ Missing OS Updates
          if [[ "$OS_FAMILY" =~ (ubuntu|debian) ]]; then
              MISSING_UPDATES=$(apt list --upgradable 2>/dev/null | grep -i security | awk '{print $1}' | tr '\n' ',' | sed 's/,$//')
          elif [[ "$OS_FAMILY" =~ (rhel|centos|rocky|almalinux) ]]; then
              MISSING_UPDATES=$(yum check-update --security 2>/dev/null | awk '{print $1}' | tr '\n' ',' | sed 's/,$//')
          fi
          [[ -z "$MISSING_UPDATES" ]] && MISSING_UPDATES="None"

          # 2️⃣ Outdated Packages
          if [[ "$OS_FAMILY" =~ (ubuntu|debian) ]]; then
              OUTDATED=$(apt list --upgradable 2>/dev/null | grep -v "Listing" | awk -F/ '{print $1}' | tr '\n' ',' | sed 's/,$//')
          else
              OUTDATED=$(yum check-update 2>/dev/null | awk '{print $1}' | tr '\n' ',' | sed 's/,$//')
          fi
          [[ -z "$OUTDATED" ]] && OUTDATED="None"

          # 3️⃣ Kernel Version
          KERNEL=$(uname -r)

          # 4️⃣ Vulnerable Apps
          if command -v dpkg &>/dev/null; then
              VULN_APPS=$(dpkg -l | egrep "apache2|nginx|mysql|php" | awk '{print $2}' | tr '\n' ',' | sed 's/,$//')
          elif command -v rpm &>/dev/null; then
              VULN_APPS=$(rpm -qa | egrep "httpd|nginx|mysql|php" | tr '\n' ',' | sed 's/,$//')
          fi
          [[ -z "$VULN_APPS" ]] && VULN_APPS="None"

          # 5️⃣ Weak Settings
          if [[ -f /etc/security/pwquality.conf ]]; then
              WEAK=$(grep -i "minlen" /etc/security/pwquality.conf || echo "minlen not set")
          else
              WEAK="pwquality.conf not found"
          fi

          echo "$TIMESTAMP hostname=$HOSTNAME ip=$IP Missing_OS_Updates=\"$MISSING_UPDATES\" Outdated_Packages=\"$OUTDATED\" Weak_Settings=\"$WEAK\" Kernel=\"$KERNEL\" Vulnerable_Apps=\"$VULN_APPS\"" >> "$LOGFILE"

    # Step 6: Run once to generate log
    - name: Run initial security scan
      shell: "{{ scan_script_path }}"

    - name: Wait for log file creation
      wait_for:
        path: "{{ client_log_path }}"
        state: present
        timeout: 30

    # Step 7: Promtail config
    - name: Create Promtail config file
      copy:
        dest: "{{ promtail_config_path }}"
        mode: '0644'
        content: |
          server:
            http_listen_port: 9081
            grpc_listen_port: 0

          positions:
            filename: /var/lib/promtail/positions.yaml

          clients:
            - url: "{{ loki_url }}"

          scrape_configs:
            - job_name: security_scan
              static_configs:
                - targets: [localhost]
                  labels:
                    job: security_scan
                    hostname: "{{ inventory_hostname }}"
                    __path__: "{{ client_log_path }}"

              pipeline_stages:
                - regex:
                    expression: '^(?P<timestamp>\S+\s+\S+)\s+hostname=(?P<hostname>\S+)\s+ip=(?P<ip>\S+)\s+Missing_OS_Updates="(?P<missing>[^"]*)"\s+Outdated_Packages="(?P<outdated>[^"]*)"\s+Weak_Settings="(?P<weak>[^"]*)"\s+Kernel="(?P<kernel>[^"]*)"\s+Vulnerable_Apps="(?P<vuln>[^"]*)"'
                - labels:
                    hostname:
                    ip:
                - timestamp:
                    source: timestamp
                    format: "2006-01-02 15:04:05"
                    timezone: Local

    # Step 8: Create systemd service for Promtail
    - name: Create Promtail systemd service
      copy:
        dest: /etc/systemd/system/promtail.service
        mode: '0644'
        content: |
          [Unit]
          Description=Promtail Log Forwarder
          After=network.target

          [Service]
          ExecStart={{ promtail_bin_dir }}/promtail -config.file={{ promtail_config_path }}
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd and enable Promtail
      systemd:
        daemon_reload: yes
        name: promtail
        enabled: yes
        state: restarted
