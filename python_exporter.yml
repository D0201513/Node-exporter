---
- name: Deploy Python Prometheus Exporter
  hosts: Melur
  become: yes

  tasks:
    - name: Ensure curl is installed
      apt:
        name: curl
        state: present
        update_cache: yes

    - name: Ensure Python3 is installed
      apt:
        name: python3
        state: present

    - name: Download get-pip.py
      get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /tmp/get-pip.py
        mode: '0755'

    - name: Install pip system-wide
      command: sudo python3 /tmp/get-pip.py --break-system-packages
      args:
        creates: /usr/local/bin/pip3

    - name: Install Python dependencies globally
      command: sudo python3 -m pip install --break-system-packages prometheus_client psutil distro

    - name: Create /opt directory if it does not exist
      file:
        path: /opt
        state: directory
        mode: '0755'

    - name: Deploy asset_agent.py exporter
      copy:
        dest: /opt/asset_agent.py
        mode: '0755'
        content: |
          import time
          import psutil
          import platform
          import socket
          import subprocess
          import re
          import distro
          from prometheus_client import start_http_server, Gauge, Info

          # Hostname
          hostname = socket.gethostname()

          # Prometheus Gauges
          cpu_cores = Gauge('asset_cpu_cores', 'CPU core count', ['hostname'])
          ram_total = Gauge('asset_ram_total_mb', 'Total RAM in MB', ['hostname'])
          ram_used = Gauge('asset_ram_used_mb', 'Used RAM in MB', ['hostname'])
          disk_total = Gauge('asset_disk_total_bytes', 'Total disk space in bytes', ['hostname', 'disk'])
          disk_used = Gauge('asset_disk_used_bytes', 'Used disk space in bytes', ['hostname', 'disk'])
          cpu_utilization = Gauge('asset_cpu_utilization_percent', 'CPU utilization percentage', ['hostname'])  # ðŸ”¹ Added

          # Info metrics (as labels)
          cpu_model = Info('asset_cpu_model_info', 'CPU model info')
          cpu_generation = Info('asset_cpu_generation_info', 'CPU generation')
          os_version = Info('asset_os_version_info', 'OS version info')
          kernel_version = Info('asset_kernel_info', 'Kernel version')
          architecture = Info('asset_architecture_info', 'System architecture')
          ip_info = Info('asset_ip_address_info', 'IP address')
          mac_info = Info('asset_mac_address_info', 'MAC address')
          serial_info = Info('asset_serial_number_info', 'System serial number')

          # Helper: Get IP
          def get_ip():
              for iface_name, iface_addrs in psutil.net_if_addrs().items():
                  for addr in iface_addrs:
                      if addr.family == socket.AF_INET and not addr.address.startswith('127.'):
                          return addr.address
              return 'unknown'

          # Helper: Get MAC
          def get_mac():
              for iface_name, iface_addrs in psutil.net_if_addrs().items():
                  for addr in iface_addrs:
                      if addr.family == psutil.AF_LINK and addr.address != '00:00:00:00:00:00':
                          return addr.address
              return 'unknown'

          # Helper: Serial number
          def get_serial_number():
              try:
                  output = subprocess.check_output(['dmidecode', '-s', 'system-serial-number'], text=True)
                  return output.strip()
              except Exception:
                  return 'unknown'

          # CPU generation
          def get_cpu_generation(cpu_model_str):
              match = re.search(r'i[3579]-(\d{4,5})', cpu_model_str)
              return match.group(1) if match else 'unknown'

          # Metric collection function
          def collect():
              ram = psutil.virtual_memory()
              cpu_info = platform.processor()
              cpu_gen = get_cpu_generation(cpu_info)
              os_flavor = distro.name(pretty=True) or platform.platform()

              # Set metrics
              cpu_cores.labels(hostname=hostname).set(psutil.cpu_count(logical=False))
              ram_used.labels(hostname=hostname).set(round(ram.used / 1024 / 1024))
              ram_total.labels(hostname=hostname).set(round(ram.total / 1024 / 1024))
              cpu_utilization.labels(hostname=hostname).set(psutil.cpu_percent(interval=None))  # ðŸ”¹ Added

              cpu_model.info({'hostname': hostname, 'model': cpu_info})
              cpu_generation.info({'hostname': hostname, 'generation': cpu_gen})
              os_version.info({'hostname': hostname, 'os': os_flavor})
              kernel_version.info({'hostname': hostname, 'kernel': platform.release()})
              architecture.info({'hostname': hostname, 'architecture': platform.machine()})
              ip_info.info({'hostname': hostname, 'ip': get_ip()})
              mac_info.info({'hostname': hostname, 'mac': get_mac()})
              serial_info.info({'hostname': hostname, 'serial': get_serial_number()})

              # Disk usage
              for part in psutil.disk_partitions(all=False):
                  try:
                      usage = psutil.disk_usage(part.mountpoint)
                      disk_total.labels(hostname=hostname, disk=part.device).set(usage.total)
                      disk_used.labels(hostname=hostname, disk=part.device).set(usage.used)
                  except Exception:
                      continue

          if __name__ == '__main__':
              print(f"ðŸ“¡ Exporter running on http://0.0.0.0:9888/metrics")
              start_http_server(9888, addr="0.0.0.0")
              while True:
                  collect()
                  time.sleep(30)

    - name: Run the exporter
      shell: "nohup sudo python3 /opt/asset_agent.py > /var/log/asset_agent.log 2>&1 &"
      args:
        chdir: /opt
